{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT1, 0.3333333333333333, False)\nright_drive_smart = Motor(Ports.PORT6, 0.3333333333333333, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 200, 173, 76, MM, 1)\ncontroller = Controller()\nseesaw = Motor(Ports.PORT3, False)\nflywheel = Motor(Ports.PORT4, False)\nbluearm = Motor(Ports.PORT12, False)\n\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_left_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA\n            # right = axisD\n            drivetrain_left_side_speed = controller.axisA.position()\n            drivetrain_right_side_speed = controller.axisD.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonLUp/buttonLDown status\n            # to control seesaw\n            if controller.buttonLUp.pressing():\n                seesaw.spin(FORWARD)\n                controller_left_shoulder_control_motors_stopped = False\n            elif controller.buttonLDown.pressing():\n                seesaw.spin(REVERSE)\n                controller_left_shoulder_control_motors_stopped = False\n            elif not controller_left_shoulder_control_motors_stopped:\n                seesaw.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_left_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ndef setUp():\n    print('Setting up...')\n    flywheel.set_stopping(COAST)\n    seesaw.set_stopping(HOLD)\n    bluearm.set_stopping(HOLD)\n    drivetrain.set_stopping(HOLD)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    seesaw.set_max_torque(100,PERCENT)\n    bluearm.set_max_torque(100,PERCENT)\n    print('Set up complete')\n\ndef purpleController():\n    if controller.buttonEUp.pressing():\n        flywheel.set_velocity(100,PERCENT)\n        flywheel.spin(FORWARD)\n    elif controller.buttonEDown.pressing():\n        flywheel.stop()\n    elif controller.buttonRUp.pressing():\n        flywheel.set_velocity(90,PERCENT)\n\nsetUp()\nwhile True:\n    purpleController()","textLanguage":"python","rconfig":[],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}
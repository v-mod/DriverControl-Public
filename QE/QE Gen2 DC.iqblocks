{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_controller_button\" id=\"Q8Nc*-0_iB9[8zJ7l-C6\" x=\"230\" y=\"70\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_set_motor_velocity\" id=\"v/SaDV_i8[Xs@=[+a.Gs\"><field name=\"MOTOR\">Flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"N`|J,R2m{].Z;fX{t:tw\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"iq_motion_spin\" id=\"jrq0l|d,h_|5[UB8GTt/\"><field name=\"MOTOR\">Flywheel</field><field name=\"DIRECTION\">rev</field></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"alVWcc%%?FXiX^Wxpie*\" x=\"730\" y=\"70\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_set_motor_velocity\" id=\"B6})X(-*d8rY?wD/3#Nq\"><field name=\"MOTOR\">Seesaw</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Wjr,[qe`kRZ];@oiahnH\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_spin\" id=\"AI#|OEkiq7-X75Y?/[RS\"><field name=\"MOTOR\">Flywheel</field><field name=\"DIRECTION\">fwd</field></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"!AM%/*}m`=xCMm-=m{}5\" x=\"70\" y=\"230\"><field name=\"BUTTON\">ButtonEUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_stop_motor\" id=\"PZXa|M#^7pdw1w:Abhm2\"><field name=\"MOTOR\">Flywheel</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"^6c?uN*uBv]P;=L0oL|i\" x=\"70\" y=\"370\"><field name=\"BUTTON\">ButtonEDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_stop_motor\" id=\"n[[F9F|ZD}ckpZt4`FwT\"><field name=\"MOTOR\">Flywheel</field></block></next></block><block type=\"iq_events_when_started\" id=\"T;N8x+YPn?@tG[6)G[IB\" x=\"870\" y=\"370\"><next><block type=\"iq_motion_set_motor_velocity\" id=\"|id!MUk}VDKw}Tt~Wp]r\"><field name=\"MOTOR\">Flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"{J^9n6{q-Ib49?#Va}MS\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"6`g3jpj@OBBgG+_Jc2B.\"><field name=\"MOTOR\">Seesaw</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"$qABGltA(Q/:5FqyR7Q|\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"zJJhi]4]REha?_#MuE$^\"><field name=\"MOTOR\">Blue</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"bKA^!@4!Ctbpun@-}=c*\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"yp7)RtfdrcDxgC;@#Sqm\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"*y5AaajRWf]uE4?wKM4l\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_stopping\" id=\"o|kM!+`L/^ouz]ebM3!G\"><field name=\"MODE\">brake</field><next><block type=\"iq_motion_set_motor_stopping\" id=\"E6k27:CX4eE_Mpxq3PN2\"><field name=\"MOTOR\">Seesaw</field><field name=\"MODE\">hold</field><next><block type=\"iq_motion_set_motor_stopping\" id=\"m8/H,K(M`cb,gHLv3c!u\"><field name=\"MOTOR\">Blue</field><field name=\"MODE\">hold</field><next><block type=\"iq_motion_set_motor_stopping\" id=\"*KMXdiDv1Zo]OCw^1?-X\"><field name=\"MOTOR\">Flywheel</field><field name=\"MODE\">coast</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[10,5,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:3","direction":"rev","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[12],"name":"Seesaw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Seesaw","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"Blue","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[6],"name":"Blue","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"Second","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT10, 0.3333333333333333, true);\nmotor RightDriveSmart = motor(PORT5, 0.3333333333333333, false);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\nmotor Seesaw = motor(PORT12, false);\nmotor Flywheel = motor(PORT11, false);\ncontroller Controller = controller();\nmotor Blue = motor(PORT6, false);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool fButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonLUp/ButtonLDown status to control Seesaw\n      if (Controller.ButtonLUp.pressing()) {\n        Seesaw.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonLDown.pressing()) {\n        Seesaw.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        Seesaw.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonFUp/ButtonFDown status to control Blue\n      if (Controller.ButtonFUp.pressing()) {\n        Blue.spin(forward);\n        fButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonFDown.pressing()) {\n        Blue.spin(reverse);\n        fButtonsControlMotorsStopped = false;\n      } else if (!fButtonsControlMotorsStopped) {\n        Blue.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        fButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n  Flywheel.setVelocity(90.0, percent);\n  Flywheel.spin(reverse);\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  Seesaw.setVelocity(100.0, percent);\n  Flywheel.spin(forward);\n}\n\n// \"when Controller ButtonEUp pressed\" hat block\nvoid onevent_ControllerButtonEUp_pressed_0() {\n  Flywheel.stop();\n}\n\n// \"when Controller ButtonEDown pressed\" hat block\nvoid onevent_ControllerButtonEDown_pressed_0() {\n  Flywheel.stop();\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Flywheel.setVelocity(100.0, percent);\n  Seesaw.setMaxTorque(100.0, percent);\n  Blue.setMaxTorque(100.0, percent);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setStopping(brake);\n  Seesaw.setStopping(hold);\n  Blue.setStopping(hold);\n  Flywheel.setStopping(coast);\n  return 0;\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  // register event handlers\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n  Controller.ButtonEUp.pressed(onevent_ControllerButtonEUp_pressed_0);\n  Controller.ButtonEDown.pressed(onevent_ControllerButtonEDown_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}
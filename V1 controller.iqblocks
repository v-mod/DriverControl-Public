{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"K$hyN3Usb?HKb8`p=cN}\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">deadzone</variable></variables><block type=\"iq_events_when_started\" id=\"n%Lc@YT])}ZSD!l]Z3Hv\" x=\"150\" y=\"-1010\"><next><block type=\"iq_variables_set_variable\" id=\"dNgYs8Thi$?tg0odJDW|\"><field name=\"VARIABLE\" id=\"K$hyN3Usb?HKb8`p=cN}\" variabletype=\"\">deadzone</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"p4Du3@-1p*_{}fZRmL@V\"><field name=\"NUM\">10</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"AYW)f3F5P:U~Z|kFcg*?\"><field name=\"MOTOR\">shooter</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"hE7U!Pvx:aGn2lS+v:wX\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\":H7/gTr0~3Q[ShlIU5ci\"><field name=\"MOTOR\">endgame</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"$k3HryzJZy4`P=X21.ZG\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"//NCuz.Ty-.Y]w;oUTXY\"><field name=\"MOTOR\">purple_dispenser</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"o]=}Jk.oc}r+lT~z6.=m\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"l[qi8LPzoN(KeBd]25T;\"><field name=\"MOTOR\">blue_</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"tBpdKfL)-:E*ed?qO#cB\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_stopping\" id=\"=ct+.y$X^}X]m.37|IOM\"><field name=\"MOTOR\">shooter</field><field name=\"MODE\">hold</field><next><block type=\"iq_motion_set_motor_stopping\" id=\"Oe`J2^02b!:92q|=5e`v\"><field name=\"MOTOR\">blue_</field><field name=\"MODE\">hold</field><next><block type=\"iq_motion_set_motor_torque\" id=\"C_a=JQW$fRgbb$X0|Ett\"><field name=\"MOTOR\">blue_</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\".HiN)o1kv4##R-v|{k1k\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"z$|FxjtDH{MbQ,n;0AK2\"><field name=\"MOTOR\">l</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"~BYf?:#n19*Ytu2czjaL\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"EToAF/0~9=eQ_dd2klK`\"><field name=\"MOTOR\">r</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"9FS(_u~p#TTUB7Fl$B?q\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_motion_spin\" id=\"g$[*~}}]^,XK?KP_VH6k\"><field name=\"MOTOR\">l</field><field name=\"DIRECTION\">fwd</field><next><block type=\"iq_motion_spin\" id=\"#JVbCHOD~Fmapp|J*u{1\"><field name=\"MOTOR\">r</field><field name=\"DIRECTION\">fwd</field><next><block type=\"iq_control_forever\" id=\"$7#!#U~0m^.%#Tg`[~WS\"><statement name=\"SUBSTACK\"><block type=\"iq_control_if_then_else\" id=\"29@38^?.=uMcp}WzjKVA\"><value name=\"CONDITION\"><block type=\"iq_operator_greater_than\" id=\"c}}#9SuP*9))-?b8YND1\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"k-I_nB/KT:6y@I[;?xqp\"><field name=\"NUM\"></field></shadow><block type=\"iq_operator_function\" id=\"nq`pqgM1N+1L~Xnlg%)m\"><field name=\"OPERATOR\">abs</field><value name=\"NUM\"><shadow type=\"math_number\" id=\"~$au.X~;*,g35qOy.gx/\"><field name=\"NUM\"></field></shadow><block type=\"iq_sensing_position_of_controller\" id=\"F3tXm#g+t30s?.2y:ip:\"><field name=\"AXIS\">AxisA</field></block></value></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"K|0F22M%)B1+?mXnS|52\"><field name=\"NUM\">50</field></shadow><block type=\"iq_variables_variable\" id=\"sKTe_JU+_v[MDzXg[*nm\"><field name=\"VARIABLE\" id=\"K$hyN3Usb?HKb8`p=cN}\" variabletype=\"\">deadzone</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_set_motor_velocity\" id=\"55ndq/{{:-q`Mk`2seF[\"><field name=\"MOTOR\">l</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Q.%Y^d]sL!u/3=cfu}.e\"><field name=\"NUM\">50</field></shadow><block type=\"iq_sensing_position_of_controller\" id=\"mJEg+j?K+6lGuToP)mwV\"><field name=\"AXIS\">AxisA</field></block></value></block></statement><statement name=\"SUBSTACK2\"><block type=\"iq_motion_set_motor_velocity\" id=\"[++N*ou-!N,%gMq@fyef\"><field name=\"MOTOR\">l</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"x0v[`@9y$K+?VDbT$x=-\"><field name=\"NUM\">0</field></shadow></value></block></statement><next><block type=\"iq_control_if_then_else\" id=\"Kz0KSg:0Bn1pb5!#s`fS\"><value name=\"CONDITION\"><block type=\"iq_operator_greater_than\" id=\"nUwK7LK7jvfKNA+sYaH(\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"gd?MXWgl%iY53}*+0[3:\"><field name=\"NUM\"></field></shadow><block type=\"iq_operator_function\" id=\"5vUQE5J0LjwDsm+ljSF6\"><field name=\"OPERATOR\">abs</field><value name=\"NUM\"><shadow type=\"math_number\" id=\"A+V;-H?NE?}c/l4tGsuD\"><field name=\"NUM\"></field></shadow><block type=\"iq_sensing_position_of_controller\" id=\"rZVpi^tHagFtE_`KVLHZ\"><field name=\"AXIS\">AxisD</field></block></value></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"Qh[B;4Mx,,Lx7eOKJ;!E\"><field name=\"NUM\">50</field></shadow><block type=\"iq_variables_variable\" id=\"mM3)po?iy4i[?zEnxJ|7\"><field name=\"VARIABLE\" id=\"K$hyN3Usb?HKb8`p=cN}\" variabletype=\"\">deadzone</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_set_motor_velocity\" id=\"[I$Zzxm{ydi+Y`{?ryDd\"><field name=\"MOTOR\">r</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"qt%7G+*08sJ+oq]42+8a\"><field name=\"NUM\">50</field></shadow><block type=\"iq_sensing_position_of_controller\" id=\"WdKD`/|b[g=_mC#{YsnR\"><field name=\"AXIS\">AxisD</field></block></value></block></statement><statement name=\"SUBSTACK2\"><block type=\"iq_motion_set_motor_velocity\" id=\"*8,+@^yPE,i[GO4!IZkT\"><field name=\"MOTOR\">r</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Th.az%o;.4*rOEC}-0W2\"><field name=\"NUM\">0</field></shadow></value></block></statement></block></next></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[10],"name":"shooter","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"shoot","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"endgame","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"extend","rev":"retract"},"triportSourcePort":22},{"port":[11],"name":"purple_dispenser","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"dispense","rev":"reverse"},"triportSourcePort":22},{"port":[5],"name":"blue_","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"pull","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"blue_","leftDir":"true","right":"shooter","rightDir":"true","e":"endgame","eDir":"false","f":"purple_dispenser","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[1],"name":"l","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"r","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor shooter = motor(PORT10, false);\nmotor endgame = motor(PORT12, false);\nmotor purple_dispenser = motor(PORT11, false);\nmotor blue_ = motor(PORT5, false);\ncontroller Controller = controller();\nmotor l = motor(PORT1, false);\nmotor r = motor(PORT6, true);\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool eButtonsControlMotorsStopped = true;\nbool fButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonLUp/ButtonLDown status to control blue_\n      if (Controller.ButtonLUp.pressing()) {\n        blue_.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonLDown.pressing()) {\n        blue_.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        blue_.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonRUp/ButtonRDown status to control shooter\n      if (Controller.ButtonRUp.pressing()) {\n        shooter.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        shooter.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        shooter.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonEUp/ButtonEDown status to control endgame\n      if (Controller.ButtonEUp.pressing()) {\n        endgame.spin(forward);\n        eButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonEDown.pressing()) {\n        endgame.spin(reverse);\n        eButtonsControlMotorsStopped = false;\n      } else if (!eButtonsControlMotorsStopped) {\n        endgame.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        eButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonFUp/ButtonFDown status to control purple_dispenser\n      if (Controller.ButtonFUp.pressing()) {\n        purple_dispenser.spin(forward);\n        fButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonFDown.pressing()) {\n        purple_dispenser.spin(reverse);\n        fButtonsControlMotorsStopped = false;\n      } else if (!fButtonsControlMotorsStopped) {\n        purple_dispenser.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        fButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat deadzone;\n\n// \"when started\" hat block\nint whenStarted1() {\n  deadzone = 10.0;\n  shooter.setVelocity(100.0, percent);\n  endgame.setVelocity(50.0, percent);\n  purple_dispenser.setVelocity(100.0, percent);\n  blue_.setVelocity(100.0, percent);\n  shooter.setStopping(hold);\n  blue_.setStopping(hold);\n  blue_.setMaxTorque(100.0, percent);\n  l.setVelocity(0.0, percent);\n  r.setVelocity(0.0, percent);\n  l.spin(forward);\n  r.spin(forward);\n  while (true) {\n    if (fabs(static_cast<float>(Controller.AxisA.position())) > deadzone) {\n      l.setVelocity(Controller.AxisA.position(), percent);\n    }\n    else {\n      l.setVelocity(0.0, percent);\n    }\n    if (fabs(static_cast<float>(Controller.AxisD.position())) > deadzone) {\n      r.setVelocity(Controller.AxisD.position(), percent);\n    }\n    else {\n      r.setVelocity(0.0, percent);\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  whenStarted1();\n}","target":"Physical"}
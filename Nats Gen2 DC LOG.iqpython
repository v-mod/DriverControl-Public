{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT1, 0.2, False)\nright_drive_smart = Motor(Ports.PORT6, 0.2, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\ntouchled_2 = Touchled(Ports.PORT2)\nblueM = Motor(Ports.PORT11, True)\nbumper_8 = Bumper(Ports.PORT8)\nendgameM = Motor(Ports.PORT9, False)\npurpleM = Motor(Ports.PORT7, False)\ncontroller = Controller()\nshootM = Motor(Ports.PORT12, True)\n\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_left_shoulder_control_motors_stopped = True\nf_buttons_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, f_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA\n            # right = axisD\n            drivetrain_left_side_speed = controller.axisA.position()\n            drivetrain_right_side_speed = controller.axisD.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonLUp/buttonLDown status\n            # to control blueM\n            if controller.buttonLUp.pressing():\n                blueM.spin(FORWARD)\n                controller_left_shoulder_control_motors_stopped = False\n            elif controller.buttonLDown.pressing():\n                blueM.spin(REVERSE)\n                controller_left_shoulder_control_motors_stopped = False\n            elif not controller_left_shoulder_control_motors_stopped:\n                blueM.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_left_shoulder_control_motors_stopped = True\n            # check the buttonFUp/buttonFDown status\n            # to control endgameM\n            if controller.buttonFUp.pressing():\n                endgameM.spin(FORWARD)\n                f_buttons_control_motors_stopped = False\n            elif controller.buttonFDown.pressing():\n                endgameM.spin(REVERSE)\n                f_buttons_control_motors_stopped = False\n            elif not f_buttons_control_motors_stopped:\n                endgameM.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                f_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      Nationals Driver Control\n# \tAuthor:       Vivaan Modi\n# \tCreated:\n# \tDescription:  Driver Control\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\ndef setUp():\n    touchled_2.set_brightness(100)\n    touchled_2.set_color(Color.RED_ORANGE)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    purpleM.set_velocity(100,PERCENT)\n    shootM.set_velocity(100,PERCENT)\n    blueM.set_max_torque(100,PERCENT)\n    endgameM.set_max_torque(100,PERCENT)\n    shootM.set_max_torque(100,PERCENT)\n    drivetrain.set_stopping(HOLD)\n    blueM.set_stopping(HOLD)\n    endgameM.set_stopping(BRAKE)\n    purpleM.set_stopping(COAST)\n    shootM.set_stopping(BRAKE)\n    touchled_2.set_fade(FadeType.FAST)\n\n\ndef motorController():\n    if controller.buttonEUp.pressing():\n        purpleM.spin(FORWARD)\n    elif controller.buttonEDown.pressing():\n        purpleM.spin(REVERSE)\n    elif controller.buttonFDown.pressing():\n        purpleM.stop()\n    if controller.buttonFUp.pressing():\n        endgameM.spin(REVERSE)\n    else:\n        endgameM.stop()\n    if controller.buttonRUp.pressing():\n        shootM.spin(FORWARD)\n    elif controller.buttonRDown.pressing():\n        shootM.stop()\n#    if abs(controller.axisA.position()) > 40 or abs(controller.axisB.position()) > 40 or abs(controller.axisC.position()) > 40 or abs(controller.axisD.position()) > 40:\n#        while abs(controller.axisA.position()) > 40 or abs(controller.axisB.position()) > 40 or abs(controller.axisC.position()) > 40 or abs(controller.axisD.position()) > 40:\n#            shootM.set_velocity(0,PERCENT)\n#            purpleM.set_velocity(45,PERCENT)\n#        shootM.set_velocity(100,PERCENT)\n#        shootM.set_max_torque(100,PERCENT)\n#        purpleM.set_velocity(100,PERCENT)\n\ndef touchLedController():\n    if brain.battery.capacity() > 69:\n        touchled_2.set_color(Color.GREEN)\n    else:\n        touchled_2.set_color(Color.ORANGE)\n\ndef touchInputController():\n    if touchled_2.pressing():\n        touchled_2.set_color(Color.RED)\n        purpleM.stop()\n        drivetrain.stop()\n        blueM.stop()\n        shootM.stop()\n        endgameM.spin_for(FORWARD,0.5,TURNS,wait=False)\n        blueM.spin_for(REVERSE,0.5,TURNS,wait=False)\n        touchLedController()\n    else:\n        touchLedController()\n\ndef logger():\n    print('L Controller: '+str(controller.axisA.position()))\n    print('R Controller: '+str(controller.axisD.position()))\n    print('Left Power: '+str(left_drive_smart.velocity(PERCENT)))\n    print('Left Output Power: '+str(left_drive_smart.velocity(RPM)))\n    print('Right Power: '+str(right_drive_smart.velocity(PERCENT)))\n    print('Right Output Power: '+str(right_drive_smart.velocity(RPM)))\nsetUp()\ntouchLedController()\nwhile True:\n    logger()\n    motorController()\n#    touchInputController()\n    wait(20,MSEC)","textLanguage":"python","rconfig":[{"port":[1,6,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:5","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[2],"name":"touchled_2","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[11],"name":"blueM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"bumper_8","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[9],"name":"endgameM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"purpleM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"blueM","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"endgameM","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[12],"name":"shootM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}